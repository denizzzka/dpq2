/**
 * Represents connection over which a cancel request can be sent
 *
 * Most functions is correspond to those in the documentation of Postgres:
 * $(HTTPS https://www.postgresql.org/docs/current/static/libpq.html)
 */
module dpq2.cancellation;

import dpq2.connection: Connection;
import dpq2.exception;

import derelict.pq.pq;
import std.conv: to;

//TODO: move to DerelictPQ
private pure nothrow @nogc extern(C)
{
    enum CONNECTION_ALLOCATED = 14;
    struct PGcancelConn;

    PGcancelConn *PQcancelCreate(PGconn *conn);
    void PQcancelFinish(PGcancelConn *cancelConn);
    ConnStatusType PQcancelStatus(const PGcancelConn *cancelConn);
    char *PQcancelErrorMessage(const PGcancelConn *cancelconn);
    int PQcancelBlocking(PGcancelConn *cancelConn);
    int PQcancelStart(PGcancelConn *cancelConn);
    PostgresPollingStatusType PQcancelPoll(PGcancelConn *cancelConn);
    int PQcancelSocket(const PGcancelConn *cancelConn);
}

/// Represents query cancellation process (cancellation connection)
class Cancellation
{
    version(Dpq2_Dynamic)
    {
        import dpq2.dynloader: ReferenceCounter;
        private immutable ReferenceCounter dynLoaderRefCnt;
    }

    protected PGcancelConn* cancelConn;

    ///
    this(Connection c)
    {
        version(Dpq2_Dynamic) dynLoaderRefCnt = ReferenceCounter(true);

        cancelConn = PQcancelCreate(c.conn);

        if(status != CONNECTION_ALLOCATED)
            throw new CancellationException(errorMessage);
    }

    ///
    ~this()
    {
        if(cancelConn !is null)
            PQcancelFinish(cancelConn);

        version(Dpq2_Dynamic) dynLoaderRefCnt.__custom_dtor();
    }

    /// Returns the status of the cancel connection
    ConnStatusType status() const nothrow
    {
        return PQcancelStatus(cancelConn);
    }

    /// Returns the error message most recently generated by an operation on the cancel connection
    string errorMessage() const
    {
        return PQcancelErrorMessage(cancelConn).to!string;
    }

    /**
     Requests that the server abandons processing of the current command in a blocking manner

     Throws exception if cancel request was not successfully dispatched.

     Successful dispatch is no guarantee that the request will have any
     effect, however. If the cancellation is effective, the current
     command will terminate early and return an error result
     (exception). If the cancellation fails (say, because the server
     was already done processing the command), then there will be no
     visible result at all.
    */
    void doCancel()
    {
        auto res = PQcancelBlocking(cancelConn);

        if(res != 1)
            throw new CancellationException(errorMessage);
    }

    /// Requests that the server abandons processing of the current command in a non-blocking manner
    void start()
    {
        if(PQcancelStart(cancelConn) != 1)
            throw new CancellationException(errorMessage);
    }

    ///
    PostgresPollingStatusType poll() nothrow
    {
        return PQcancelPoll(cancelConn);
    }

    ///
    auto socketDuplicate()
    {
        import dpq2.socket_stuff: duplicateSocket;

        auto s = PQcancelSocket(cancelConn);

        if(s == -1)
            throw new CancellationException(errorMessage);

        return s.duplicateSocket;
    }
}

///
class CancellationException : Dpq2Exception
{
    this(string msg, string file = __FILE__, size_t line = __LINE__)
    {
        super(msg, file, line);
    }
}
